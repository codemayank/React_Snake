{"version":3,"sources":["index.js"],"names":["GridItem","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","Food","Snake","Wall","initialGameState","startPoint","snakeWidth","velocity","snakeDivs","foodPosition","this","createSegment","moveDirection","direction","increment","currentSnakeWidth","gameOver","PlayArea","props","_this","Object","_home_mayank_Desktop_myprojects_pesto_quiz_snake_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_mayank_Desktop_myprojects_pesto_quiz_snake_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_mayank_Desktop_myprojects_pesto_quiz_snake_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","startGame","state","setState","_home_mayank_Desktop_myprojects_pesto_quiz_snake_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","tick","endGame","clearInterval","timer","setInterval","updateSnake","slice","indexOf","prevState","map","position","idx","handleKeyPress","e","move","keyCode","concat","createFood","Math","floor","random","gridSize","bind","grid","i","push","key","onKeyDown","tabIndex","length","onClick","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.fa7efdf6.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './snake.css'\n\nconst GridItem = () => {\n  return <div className=\"segment\" />\n}\n\nconst Food = () => {\n  return <div className=\"segment food\" />\n}\n\nconst Snake = () => {\n  return <div className=\"segment snake\" />\n}\n\nconst Wall = () => {\n  return <div className=\"segment wall\" />\n}\n\nconst initialGameState = function(startPoint, snakeWidth, velocity) {\n  return {\n    snakeDivs: [startPoint],\n    foodPosition: this.createSegment(),\n    moveDirection: {\n      direction: 'Horizontal',\n      increment: 1\n    },\n    currentSnakeWidth: snakeWidth,\n    gameOver: false,\n    velocity: velocity\n  }\n}\n\nclass PlayArea extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = initialGameState.call(this, 250, 20, 200)\n    this.gridSize = 20\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n    this.updateSnake = this.updateSnake.bind(this)\n    this.tick = this.tick.bind(this)\n    this.startGame = this.startGame.bind(this)\n    this.createFood = this.createFood.bind(this)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  startGame = () => {\n    if (this.state.gameOver) {\n      this.setState(initialGameState.call(this, 250, 20, 200))\n    }\n    this.tick()\n  }\n  endGame = () => {\n    this.setState({\n      gameOver: true\n    })\n    clearInterval(this.timer)\n  }\n\n  tick = () => {\n    this.timer = setInterval(() => {\n      if (this.state.foodPosition === this.state.snakeDivs[0]) {\n        this.updateSnake()\n      } else if (\n        this.state.snakeDivs.slice(1).indexOf(this.state.snakeDivs[0]) !== -1\n      ) {\n        this.endGame()\n      } else if (\n        this.state.snakeDivs[0] < 0 ||\n        this.state.snakeDivs[0] >= 400 ||\n        this.state.snakeDivs[0] % 20 === 0 ||\n        this.state.snakeDivs[0] % 20 === 19\n      ) {\n        this.endGame()\n      } else {\n        this.setState(prevState => ({\n          snakeDivs: prevState.snakeDivs.map((position, idx) => {\n            if (idx === 0) {\n              return position + this.state.moveDirection.increment\n            } else {\n              return prevState.snakeDivs[idx - 1]\n            }\n          })\n        }))\n      }\n    }, this.state.velocity)\n  }\n\n  handleKeyPress = e => {\n    let move = this.state.moveDirection\n    switch (e.keyCode) {\n      case 39:\n        if (move.direction !== 'Horizontal') {\n          move.increment = 1\n          move.direction = 'Horizontal'\n          break\n        } else {\n          break\n        }\n      case 37:\n        if (move.direction !== 'Horizontal') {\n          move.increment = -1\n          move.direction = 'Horizontal'\n          break\n        } else {\n          break\n        }\n      case 38:\n        if (move.direction !== 'Vertical') {\n          move.increment = -20\n          move.direction = 'Vertical'\n          break\n        } else {\n          break\n        }\n\n      case 40:\n        if (move.direction !== 'Vertical') {\n          move.increment = +20\n          move.direction = 'Vertical'\n          break\n        } else {\n          break\n        }\n\n      default:\n        break\n    }\n    if (this.state.snakeDivs[0] === this.state.foodPosition) {\n      this.updateSnake()\n    } else {\n      this.setState({\n        moveDirection: {\n          direction: move.direction,\n          increment: move.increment\n        }\n      })\n    }\n  }\n\n  updateSnake = () => {\n    this.setState(prevState => ({\n      snakeDivs: prevState.snakeDivs.concat([prevState.snakeDivs[0] + 1]),\n      foodPosition: this.createFood()\n    }))\n  }\n\n  createSegment = () => {\n    const min = 20\n    const max = 400\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  createFood = () => {\n    let foodPosition = this.createSegment()\n    //food should not be created on snake body or on the walls\n    while (\n      this.state.snakeDivs.indexOf(foodPosition) !== -1 ||\n      foodPosition % 20 === 0 ||\n      foodPosition % 20 === 19\n    ) {\n      foodPosition = this.createSegment()\n    }\n    return foodPosition\n  }\n\n  render() {\n    const grid = []\n    for (let i = 0; i < this.gridSize * this.gridSize; i++) {\n      if (this.state.snakeDivs.indexOf(i) !== -1) {\n        grid.push(<Snake key={i} />)\n      } else if (i === this.state.foodPosition) {\n        grid.push(<Food key={i} />)\n      } else if (i % 20 === 19 || i % 20 === 0) {\n        grid.push(<Wall />)\n      } else {\n        grid.push(<GridItem key={i} />)\n      }\n    }\n    return (\n      <div onKeyDown={this.handleKeyPress} tabIndex=\"0\">\n        <div className=\"player info\">\n          <h2>score: {this.state.snakeDivs.length - 1}</h2>\n        </div>\n        <div className=\"player controls\">\n          <button onClick={this.startGame}>Start</button>\n          <button onClick={this.endGame}>End Game</button>\n        </div>\n        <div className=\"play-area\">\n          {!this.state.gameOver\n            ? grid\n            : `Game over! your score is ${this.state.snakeDivs.length - 1}`}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<PlayArea />, document.querySelector('#root'))\n"],"sourceRoot":""}